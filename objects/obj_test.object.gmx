<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

pth_smoothed = path_create_smoothed( pth_test, 0.25, 0, false );
pth_reduced = path_duplicate( pth_test_high );
pth_trace = path_from_image_outline( spr_test, 0, obj_dummy );
pth_trace_reduced = path_RDP_reduce( pth_trace, 1, false );
pth_trace_reduceder = path_RDP_reduce( pth_trace, 3, false );

epsilon = 0;
mode = 0;

if ( display_aa == 0 ) display_reset( 0, true );
if ( display_aa == 2 ) display_reset( 2, true );
if ( display_aa == 6 ) display_reset( 4, true );
if ( display_aa &gt;  6 ) display_reset( 8, true );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarm 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

if ( keyboard_check_pressed( vk_right ) ) mode = ( mode + 1 ) mod 4;
if ( keyboard_check_pressed( vk_left ) ) mode = ( mode + 4 - 1 ) mod 4;

if ( mode == 2 ) {
    if ( keyboard_check( vk_up ) ) and ( alarm[0] &lt;= 0 ) {
        epsilon = min( 50, epsilon + 0.2 );
        alarm[0] = 4;
        path_delete( pth_reduced );
        pth_reduced = path_RDP_reduce( pth_test_high, epsilon, false );
    }
    
    if ( keyboard_check( vk_down ) ) and ( alarm[0] &lt;= 0 ) {
        epsilon = max( 0, epsilon - 0.2 );
        alarm[0] = 4;
        path_delete( pth_reduced );
        pth_reduced = path_RDP_reduce( pth_test_high, epsilon, false );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

draw_set_colour( c_brown );

if ( mode == 0 ) {
    draw_path_thick( pth_test, 0, 0, true );
    if ( nearest_point_on_path( mouse_x, mouse_y,    pth_test,   0, 0,   true ) ) draw_circle( global.nearest_point_on_path_x, global.nearest_point_on_path_y, 12, true );
}

if ( mode == 1 ) {
    draw_path_thick( pth_smoothed, 0, 0, true );
}

if ( mode == 2 ) {
    draw_path_thick( pth_reduced, 0, 0, true );
    for( var i = 0; i &lt; path_get_number( pth_reduced ); i++ ) draw_circle( path_get_point_x( pth_reduced, i ), path_get_point_y( pth_reduced, i ), 2, false );
}

if ( mode == 3 ) {
    draw_path_thick( pth_trace,              70, 250,   false );
    draw_path_thick( pth_trace_reduced,     620, 250,   false );
    draw_path_thick( pth_trace_reduceder,   340, 500,   false );
}

draw_set_font( fnt_text );
draw_set_valign( fa_bottom );
draw_text( 5, room_height - 5, "Press left/right to change demonstration." );
if ( mode == 2 ) draw_text( 5, room_height - 45, "Press up/down to apply simplification." );

draw_set_halign( fa_right );
switch( mode ) {
    case 0: {
        draw_text( room_width - 5, room_height - 5, "Vertices of the path presented here: " + string( path_get_number( pth_test ) ) );
        break;
    }
    case 1: {
        draw_text( room_width - 5, room_height - 5, "Vertices of the path, now curved, presented here: " + string( path_get_number( pth_smoothed ) ) );
        break;
    }
    case 2: {
        draw_text( room_width - 5, room_height - 5, "Vertices of the original path: " + string( path_get_number( pth_test ) ) + "#Vertices of the path, reduced in complexity: " + string( path_get_number( pth_reduced ) ) + '#The factor "epsilon": ' + string( epsilon ) );
        break;
    }
    case 3: {
        draw_text( room_width - 5, room_height - 5, "Vertices of the original path: " + string( path_get_number( pth_trace ) ) + "#Vertices of the path now simplified: " + string( path_get_number( pth_trace_reduced ) ) + "#Vertices of the path simplified yet further still: " + string( path_get_number( pth_trace_reduceder ) ) );
        break;
    }
}

draw_set_halign( fa_center );
draw_set_valign( fa_top );
draw_set_font( fnt_figure );
switch( mode ) {
    case 0: {
        draw_text( room_width * 0.5, 5, "Fig. 1 of 4: Demonstration of the nearest point on a path." );
        break;
    }
    case 1: {
        draw_text( room_width * 0.5, 5, "Fig. 2 of 4: A curved path, after application of Catmull-Rom splines." );
        break;
    }
    case 2: {
        draw_text( room_width * 0.5, 5, "Fig. 3 of 4: An implementation of the Ramer-Douglas-Peucker algorithm." );
        break;
    }
    case 3: {
        draw_text( room_width * 0.5, 5, "Fig. 4 of 4: Image tracing, alongside two tracings with fewer vertices." );
        break;
    }
}
draw_set_halign( fa_left );
draw_set_font( -1 );

draw_set_colour( c_black );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
